# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TemplatePreview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_email': 'str',
        'from_name': 'str',
        'html': 'str',
        'subject': 'str',
        'used_feed_names': 'list[str]',
        'preview_text': 'str'
    }

    attribute_map = {
        'from_email': 'fromEmail',
        'from_name': 'fromName',
        'html': 'html',
        'subject': 'subject',
        'used_feed_names': 'usedFeedNames',
        'preview_text': 'previewText'
    }

    def __init__(self, from_email=None, from_name=None, html=None, subject=None, used_feed_names=None, preview_text=None):  # noqa: E501
        """TemplatePreview - a model defined in Swagger"""  # noqa: E501

        self._from_email = None
        self._from_name = None
        self._html = None
        self._subject = None
        self._used_feed_names = None
        self._preview_text = None
        self.discriminator = None

        if from_email is not None:
            self.from_email = from_email
        if from_name is not None:
            self.from_name = from_name
        if html is not None:
            self.html = html
        if subject is not None:
            self.subject = subject
        if used_feed_names is not None:
            self.used_feed_names = used_feed_names
        if preview_text is not None:
            self.preview_text = preview_text

    @property
    def from_email(self):
        """Gets the from_email of this TemplatePreview.  # noqa: E501

        Sender email address  # noqa: E501

        :return: The from_email of this TemplatePreview.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this TemplatePreview.

        Sender email address  # noqa: E501

        :param from_email: The from_email of this TemplatePreview.  # noqa: E501
        :type: str
        """

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this TemplatePreview.  # noqa: E501

        Sender name  # noqa: E501

        :return: The from_name of this TemplatePreview.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this TemplatePreview.

        Sender name  # noqa: E501

        :param from_name: The from_name of this TemplatePreview.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def html(self):
        """Gets the html of this TemplatePreview.  # noqa: E501

        Html content of the template  # noqa: E501

        :return: The html of this TemplatePreview.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this TemplatePreview.

        Html content of the template  # noqa: E501

        :param html: The html of this TemplatePreview.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def subject(self):
        """Gets the subject of this TemplatePreview.  # noqa: E501

        subject of the template  # noqa: E501

        :return: The subject of this TemplatePreview.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TemplatePreview.

        subject of the template  # noqa: E501

        :param subject: The subject of this TemplatePreview.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def used_feed_names(self):
        """Gets the used_feed_names of this TemplatePreview.  # noqa: E501


        :return: The used_feed_names of this TemplatePreview.  # noqa: E501
        :rtype: list[str]
        """
        return self._used_feed_names

    @used_feed_names.setter
    def used_feed_names(self, used_feed_names):
        """Sets the used_feed_names of this TemplatePreview.


        :param used_feed_names: The used_feed_names of this TemplatePreview.  # noqa: E501
        :type: list[str]
        """

        self._used_feed_names = used_feed_names

    @property
    def preview_text(self):
        """Gets the preview_text of this TemplatePreview.  # noqa: E501

        Preview text of the template  # noqa: E501

        :return: The preview_text of this TemplatePreview.  # noqa: E501
        :rtype: str
        """
        return self._preview_text

    @preview_text.setter
    def preview_text(self, preview_text):
        """Sets the preview_text of this TemplatePreview.

        Preview text of the template  # noqa: E501

        :param preview_text: The preview_text of this TemplatePreview.  # noqa: E501
        :type: str
        """

        self._preview_text = preview_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplatePreview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplatePreview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

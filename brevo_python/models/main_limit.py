# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'duration_unit': 'str',
        'duration_value': 'int',
        'limit_value': 'int',
        'reward_limit_id': 'str',
        'sliding_schedule': 'bool',
        'type': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'duration_unit': 'durationUnit',
        'duration_value': 'durationValue',
        'limit_value': 'limitValue',
        'reward_limit_id': 'rewardLimitId',
        'sliding_schedule': 'slidingSchedule',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, duration_unit=None, duration_value=None, limit_value=None, reward_limit_id=None, sliding_schedule=None, type=None, updated_at=None):  # noqa: E501
        """MainLimit - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._duration_unit = None
        self._duration_value = None
        self._limit_value = None
        self._reward_limit_id = None
        self._sliding_schedule = None
        self._type = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if duration_unit is not None:
            self.duration_unit = duration_unit
        if duration_value is not None:
            self.duration_value = duration_value
        if limit_value is not None:
            self.limit_value = limit_value
        if reward_limit_id is not None:
            self.reward_limit_id = reward_limit_id
        if sliding_schedule is not None:
            self.sliding_schedule = sliding_schedule
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this MainLimit.  # noqa: E501

        Timestamp when the reward limit was created  # noqa: E501

        :return: The created_at of this MainLimit.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MainLimit.

        Timestamp when the reward limit was created  # noqa: E501

        :param created_at: The created_at of this MainLimit.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def duration_unit(self):
        """Gets the duration_unit of this MainLimit.  # noqa: E501

        Unit of time for the reward limit's availability (e.g., day/week/month/year).  # noqa: E501

        :return: The duration_unit of this MainLimit.  # noqa: E501
        :rtype: str
        """
        return self._duration_unit

    @duration_unit.setter
    def duration_unit(self, duration_unit):
        """Sets the duration_unit of this MainLimit.

        Unit of time for the reward limit's availability (e.g., day/week/month/year).  # noqa: E501

        :param duration_unit: The duration_unit of this MainLimit.  # noqa: E501
        :type: str
        """

        self._duration_unit = duration_unit

    @property
    def duration_value(self):
        """Gets the duration_value of this MainLimit.  # noqa: E501

        Number of days/weeks/month/year for reward limit  # noqa: E501

        :return: The duration_value of this MainLimit.  # noqa: E501
        :rtype: int
        """
        return self._duration_value

    @duration_value.setter
    def duration_value(self, duration_value):
        """Sets the duration_value of this MainLimit.

        Number of days/weeks/month/year for reward limit  # noqa: E501

        :param duration_value: The duration_value of this MainLimit.  # noqa: E501
        :type: int
        """

        self._duration_value = duration_value

    @property
    def limit_value(self):
        """Gets the limit_value of this MainLimit.  # noqa: E501

        Value of the limit  # noqa: E501

        :return: The limit_value of this MainLimit.  # noqa: E501
        :rtype: int
        """
        return self._limit_value

    @limit_value.setter
    def limit_value(self, limit_value):
        """Sets the limit_value of this MainLimit.

        Value of the limit  # noqa: E501

        :param limit_value: The limit_value of this MainLimit.  # noqa: E501
        :type: int
        """

        self._limit_value = limit_value

    @property
    def reward_limit_id(self):
        """Gets the reward_limit_id of this MainLimit.  # noqa: E501

        Unique identifier for the reward limit  # noqa: E501

        :return: The reward_limit_id of this MainLimit.  # noqa: E501
        :rtype: str
        """
        return self._reward_limit_id

    @reward_limit_id.setter
    def reward_limit_id(self, reward_limit_id):
        """Sets the reward_limit_id of this MainLimit.

        Unique identifier for the reward limit  # noqa: E501

        :param reward_limit_id: The reward_limit_id of this MainLimit.  # noqa: E501
        :type: str
        """

        self._reward_limit_id = reward_limit_id

    @property
    def sliding_schedule(self):
        """Gets the sliding_schedule of this MainLimit.  # noqa: E501

        Select true to calculate all redeems / attributions from previous value of selected durationUnit to current time  # noqa: E501

        :return: The sliding_schedule of this MainLimit.  # noqa: E501
        :rtype: bool
        """
        return self._sliding_schedule

    @sliding_schedule.setter
    def sliding_schedule(self, sliding_schedule):
        """Sets the sliding_schedule of this MainLimit.

        Select true to calculate all redeems / attributions from previous value of selected durationUnit to current time  # noqa: E501

        :param sliding_schedule: The sliding_schedule of this MainLimit.  # noqa: E501
        :type: bool
        """

        self._sliding_schedule = sliding_schedule

    @property
    def type(self):
        """Gets the type of this MainLimit.  # noqa: E501

        Type of reward  # noqa: E501

        :return: The type of this MainLimit.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MainLimit.

        Type of reward  # noqa: E501

        :param type: The type of this MainLimit.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this MainLimit.  # noqa: E501

        Timestamp when the reward limit was created  # noqa: E501

        :return: The updated_at of this MainLimit.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MainLimit.

        Timestamp when the reward limit was created  # noqa: E501

        :param updated_at: The updated_at of this MainLimit.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

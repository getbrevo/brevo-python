# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoyaltyProgram(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code_count': 'int',
        'created_at': 'str',
        'description': 'str',
        'document_id': 'str',
        'id': 'str',
        'meta': 'dict(str, object)',
        'name': 'str',
        'pattern': 'str',
        'state': 'str',
        'subscription_generator_id': 'str',
        'subscription_pool_id': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'code_count': 'codeCount',
        'created_at': 'createdAt',
        'description': 'description',
        'document_id': 'documentId',
        'id': 'id',
        'meta': 'meta',
        'name': 'name',
        'pattern': 'pattern',
        'state': 'state',
        'subscription_generator_id': 'subscriptionGeneratorId',
        'subscription_pool_id': 'subscriptionPoolId',
        'updated_at': 'updatedAt'
    }

    def __init__(self, code_count=None, created_at=None, description=None, document_id=None, id=None, meta=None, name=None, pattern=None, state=None, subscription_generator_id=None, subscription_pool_id=None, updated_at=None):  # noqa: E501
        """LoyaltyProgram - a model defined in Swagger"""  # noqa: E501

        self._code_count = None
        self._created_at = None
        self._description = None
        self._document_id = None
        self._id = None
        self._meta = None
        self._name = None
        self._pattern = None
        self._state = None
        self._subscription_generator_id = None
        self._subscription_pool_id = None
        self._updated_at = None
        self.discriminator = None

        if code_count is not None:
            self.code_count = code_count
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if document_id is not None:
            self.document_id = document_id
        if id is not None:
            self.id = id
        if meta is not None:
            self.meta = meta
        if name is not None:
            self.name = name
        if pattern is not None:
            self.pattern = pattern
        if state is not None:
            self.state = state
        if subscription_generator_id is not None:
            self.subscription_generator_id = subscription_generator_id
        if subscription_pool_id is not None:
            self.subscription_pool_id = subscription_pool_id
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def code_count(self):
        """Gets the code_count of this LoyaltyProgram.  # noqa: E501

        Loyalty Program code count  # noqa: E501

        :return: The code_count of this LoyaltyProgram.  # noqa: E501
        :rtype: int
        """
        return self._code_count

    @code_count.setter
    def code_count(self, code_count):
        """Sets the code_count of this LoyaltyProgram.

        Loyalty Program code count  # noqa: E501

        :param code_count: The code_count of this LoyaltyProgram.  # noqa: E501
        :type: int
        """

        self._code_count = code_count

    @property
    def created_at(self):
        """Gets the created_at of this LoyaltyProgram.  # noqa: E501

        Loyalty Program creation date  # noqa: E501

        :return: The created_at of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoyaltyProgram.

        Loyalty Program creation date  # noqa: E501

        :param created_at: The created_at of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this LoyaltyProgram.  # noqa: E501

        Loyalty Program description  # noqa: E501

        :return: The description of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LoyaltyProgram.

        Loyalty Program description  # noqa: E501

        :param description: The description of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_id(self):
        """Gets the document_id of this LoyaltyProgram.  # noqa: E501

        string  # noqa: E501

        :return: The document_id of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this LoyaltyProgram.

        string  # noqa: E501

        :param document_id: The document_id of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def id(self):
        """Gets the id of this LoyaltyProgram.  # noqa: E501

        Loyalty Program ID  # noqa: E501

        :return: The id of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyProgram.

        Loyalty Program ID  # noqa: E501

        :param id: The id of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this LoyaltyProgram.  # noqa: E501

        Loyalty Program meta data  # noqa: E501

        :return: The meta of this LoyaltyProgram.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this LoyaltyProgram.

        Loyalty Program meta data  # noqa: E501

        :param meta: The meta of this LoyaltyProgram.  # noqa: E501
        :type: dict(str, object)
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this LoyaltyProgram.  # noqa: E501

        Loyalty Program name  # noqa: E501

        :return: The name of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoyaltyProgram.

        Loyalty Program name  # noqa: E501

        :param name: The name of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pattern(self):
        """Gets the pattern of this LoyaltyProgram.  # noqa: E501

        string  # noqa: E501

        :return: The pattern of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this LoyaltyProgram.

        string  # noqa: E501

        :param pattern: The pattern of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def state(self):
        """Gets the state of this LoyaltyProgram.  # noqa: E501

        Loyalty Program state  # noqa: E501

        :return: The state of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LoyaltyProgram.

        Loyalty Program state  # noqa: E501

        :param state: The state of this LoyaltyProgram.  # noqa: E501
        :type: str
        """
        allowed_values = ["inactive", "active"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscription_generator_id(self):
        """Gets the subscription_generator_id of this LoyaltyProgram.  # noqa: E501

        Loyalty Program subscription generator ID  # noqa: E501

        :return: The subscription_generator_id of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._subscription_generator_id

    @subscription_generator_id.setter
    def subscription_generator_id(self, subscription_generator_id):
        """Sets the subscription_generator_id of this LoyaltyProgram.

        Loyalty Program subscription generator ID  # noqa: E501

        :param subscription_generator_id: The subscription_generator_id of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._subscription_generator_id = subscription_generator_id

    @property
    def subscription_pool_id(self):
        """Gets the subscription_pool_id of this LoyaltyProgram.  # noqa: E501

        Loyalty Program subscription pool ID  # noqa: E501

        :return: The subscription_pool_id of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._subscription_pool_id

    @subscription_pool_id.setter
    def subscription_pool_id(self, subscription_pool_id):
        """Sets the subscription_pool_id of this LoyaltyProgram.

        Loyalty Program subscription pool ID  # noqa: E501

        :param subscription_pool_id: The subscription_pool_id of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._subscription_pool_id = subscription_pool_id

    @property
    def updated_at(self):
        """Gets the updated_at of this LoyaltyProgram.  # noqa: E501

        Loyalty Program last modification date  # noqa: E501

        :return: The updated_at of this LoyaltyProgram.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LoyaltyProgram.

        Loyalty Program last modification date  # noqa: E501

        :param updated_at: The updated_at of this LoyaltyProgram.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoyaltyProgram, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoyaltyProgram):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainNodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'args': 'list[MainNodeResponse]',
        'array': 'list[MainNodeResponse]',
        'boolean': 'bool',
        'description': 'str',
        '_float': 'float',
        '_int': 'int',
        'op': 'str',
        'string': 'str'
    }

    attribute_map = {
        'args': 'args',
        'array': 'array',
        'boolean': 'boolean',
        'description': 'description',
        '_float': 'float',
        '_int': 'int',
        'op': 'op',
        'string': 'string'
    }

    def __init__(self, args=None, array=None, boolean=None, description=None, _float=None, _int=None, op=None, string=None):  # noqa: E501
        """MainNodeResponse - a model defined in Swagger"""  # noqa: E501

        self._args = None
        self._array = None
        self._boolean = None
        self._description = None
        self.__float = None
        self.__int = None
        self._op = None
        self._string = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if array is not None:
            self.array = array
        if boolean is not None:
            self.boolean = boolean
        if description is not None:
            self.description = description
        if _float is not None:
            self._float = _float
        if _int is not None:
            self._int = _int
        if op is not None:
            self.op = op
        if string is not None:
            self.string = string

    @property
    def args(self):
        """Gets the args of this MainNodeResponse.  # noqa: E501

        array[object]  # noqa: E501

        :return: The args of this MainNodeResponse.  # noqa: E501
        :rtype: list[MainNodeResponse]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this MainNodeResponse.

        array[object]  # noqa: E501

        :param args: The args of this MainNodeResponse.  # noqa: E501
        :type: list[MainNodeResponse]
        """

        self._args = args

    @property
    def array(self):
        """Gets the array of this MainNodeResponse.  # noqa: E501

        Array values for rule definition  # noqa: E501

        :return: The array of this MainNodeResponse.  # noqa: E501
        :rtype: list[MainNodeResponse]
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this MainNodeResponse.

        Array values for rule definition  # noqa: E501

        :param array: The array of this MainNodeResponse.  # noqa: E501
        :type: list[MainNodeResponse]
        """

        self._array = array

    @property
    def boolean(self):
        """Gets the boolean of this MainNodeResponse.  # noqa: E501

        Boolean values for rule definition  # noqa: E501

        :return: The boolean of this MainNodeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        """Sets the boolean of this MainNodeResponse.

        Boolean values for rule definition  # noqa: E501

        :param boolean: The boolean of this MainNodeResponse.  # noqa: E501
        :type: bool
        """

        self._boolean = boolean

    @property
    def description(self):
        """Gets the description of this MainNodeResponse.  # noqa: E501

        Description for rule definition  # noqa: E501

        :return: The description of this MainNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MainNodeResponse.

        Description for rule definition  # noqa: E501

        :param description: The description of this MainNodeResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _float(self):
        """Gets the _float of this MainNodeResponse.  # noqa: E501

        Float values for rule definition  # noqa: E501

        :return: The _float of this MainNodeResponse.  # noqa: E501
        :rtype: float
        """
        return self.__float

    @_float.setter
    def _float(self, _float):
        """Sets the _float of this MainNodeResponse.

        Float values for rule definition  # noqa: E501

        :param _float: The _float of this MainNodeResponse.  # noqa: E501
        :type: float
        """

        self.__float = _float

    @property
    def _int(self):
        """Gets the _int of this MainNodeResponse.  # noqa: E501

        int64  # noqa: E501

        :return: The _int of this MainNodeResponse.  # noqa: E501
        :rtype: int
        """
        return self.__int

    @_int.setter
    def _int(self, _int):
        """Sets the _int of this MainNodeResponse.

        int64  # noqa: E501

        :param _int: The _int of this MainNodeResponse.  # noqa: E501
        :type: int
        """

        self.__int = _int

    @property
    def op(self):
        """Gets the op of this MainNodeResponse.  # noqa: E501

        Operator selected for rule definition  # noqa: E501

        :return: The op of this MainNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this MainNodeResponse.

        Operator selected for rule definition  # noqa: E501

        :param op: The op of this MainNodeResponse.  # noqa: E501
        :type: str
        """

        self._op = op

    @property
    def string(self):
        """Gets the string of this MainNodeResponse.  # noqa: E501

        Boolean values for rule definition  # noqa: E501

        :return: The string of this MainNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this MainNodeResponse.

        Boolean values for rule definition  # noqa: E501

        :param string: The string of this MainNodeResponse.  # noqa: E501
        :type: str
        """

        self._string = string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainNodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainNodeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

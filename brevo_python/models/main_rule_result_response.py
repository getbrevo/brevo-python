# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainRuleResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'parameters': 'list[MainResultParameterResponse]',
        'service': 'str'
    }

    attribute_map = {
        'action': 'action',
        'parameters': 'parameters',
        'service': 'service'
    }

    def __init__(self, action=None, parameters=None, service=None):  # noqa: E501
        """MainRuleResultResponse - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._parameters = None
        self._service = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if parameters is not None:
            self.parameters = parameters
        if service is not None:
            self.service = service

    @property
    def action(self):
        """Gets the action of this MainRuleResultResponse.  # noqa: E501

        Action for the defined rule  # noqa: E501

        :return: The action of this MainRuleResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this MainRuleResultResponse.

        Action for the defined rule  # noqa: E501

        :param action: The action of this MainRuleResultResponse.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def parameters(self):
        """Gets the parameters of this MainRuleResultResponse.  # noqa: E501

        Parameters to define the reward  # noqa: E501

        :return: The parameters of this MainRuleResultResponse.  # noqa: E501
        :rtype: list[MainResultParameterResponse]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this MainRuleResultResponse.

        Parameters to define the reward  # noqa: E501

        :param parameters: The parameters of this MainRuleResultResponse.  # noqa: E501
        :type: list[MainResultParameterResponse]
        """

        self._parameters = parameters

    @property
    def service(self):
        """Gets the service of this MainRuleResultResponse.  # noqa: E501

        Selected service to define the reward  # noqa: E501

        :return: The service of this MainRuleResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MainRuleResultResponse.

        Selected service to define the reward  # noqa: E501

        :param service: The service of this MainRuleResultResponse.  # noqa: E501
        :type: str
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainRuleResultResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainRuleResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateBalanceDefinitionPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_availability_duration_modifier': 'str',
        'balance_availability_duration_unit': 'str',
        'balance_availability_duration_value': 'int',
        'balance_expiration_date': 'date',
        'balance_option_amount_overtaking_strategy': 'str',
        'balance_option_credit_rounding': 'str',
        'balance_option_debit_rounding': 'str',
        'description': 'str',
        'image_ref': 'str',
        'max_amount': 'float',
        'max_credit_amount_limit': 'float',
        'max_debit_amount_limit': 'float',
        'meta': 'object',
        'min_amount': 'float',
        'name': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'balance_availability_duration_modifier': 'balanceAvailabilityDurationModifier',
        'balance_availability_duration_unit': 'balanceAvailabilityDurationUnit',
        'balance_availability_duration_value': 'balanceAvailabilityDurationValue',
        'balance_expiration_date': 'balanceExpirationDate',
        'balance_option_amount_overtaking_strategy': 'balanceOptionAmountOvertakingStrategy',
        'balance_option_credit_rounding': 'balanceOptionCreditRounding',
        'balance_option_debit_rounding': 'balanceOptionDebitRounding',
        'description': 'description',
        'image_ref': 'imageRef',
        'max_amount': 'maxAmount',
        'max_credit_amount_limit': 'maxCreditAmountLimit',
        'max_debit_amount_limit': 'maxDebitAmountLimit',
        'meta': 'meta',
        'min_amount': 'minAmount',
        'name': 'name',
        'unit': 'unit'
    }

    def __init__(self, balance_availability_duration_modifier=None, balance_availability_duration_unit=None, balance_availability_duration_value=None, balance_expiration_date=None, balance_option_amount_overtaking_strategy=None, balance_option_credit_rounding=None, balance_option_debit_rounding=None, description=None, image_ref=None, max_amount=None, max_credit_amount_limit=None, max_debit_amount_limit=None, meta=None, min_amount=None, name=None, unit=None):  # noqa: E501
        """CreateBalanceDefinitionPayload - a model defined in Swagger"""  # noqa: E501

        self._balance_availability_duration_modifier = None
        self._balance_availability_duration_unit = None
        self._balance_availability_duration_value = None
        self._balance_expiration_date = None
        self._balance_option_amount_overtaking_strategy = None
        self._balance_option_credit_rounding = None
        self._balance_option_debit_rounding = None
        self._description = None
        self._image_ref = None
        self._max_amount = None
        self._max_credit_amount_limit = None
        self._max_debit_amount_limit = None
        self._meta = None
        self._min_amount = None
        self._name = None
        self._unit = None
        self.discriminator = None

        if balance_availability_duration_modifier is not None:
            self.balance_availability_duration_modifier = balance_availability_duration_modifier
        if balance_availability_duration_unit is not None:
            self.balance_availability_duration_unit = balance_availability_duration_unit
        if balance_availability_duration_value is not None:
            self.balance_availability_duration_value = balance_availability_duration_value
        if balance_expiration_date is not None:
            self.balance_expiration_date = balance_expiration_date
        if balance_option_amount_overtaking_strategy is not None:
            self.balance_option_amount_overtaking_strategy = balance_option_amount_overtaking_strategy
        if balance_option_credit_rounding is not None:
            self.balance_option_credit_rounding = balance_option_credit_rounding
        if balance_option_debit_rounding is not None:
            self.balance_option_debit_rounding = balance_option_debit_rounding
        if description is not None:
            self.description = description
        if image_ref is not None:
            self.image_ref = image_ref
        if max_amount is not None:
            self.max_amount = max_amount
        if max_credit_amount_limit is not None:
            self.max_credit_amount_limit = max_credit_amount_limit
        if max_debit_amount_limit is not None:
            self.max_debit_amount_limit = max_debit_amount_limit
        if meta is not None:
            self.meta = meta
        if min_amount is not None:
            self.min_amount = min_amount
        self.name = name
        self.unit = unit

    @property
    def balance_availability_duration_modifier(self):
        """Gets the balance_availability_duration_modifier of this CreateBalanceDefinitionPayload.  # noqa: E501

        Defines when the balance expires within the selected duration.  # noqa: E501

        :return: The balance_availability_duration_modifier of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._balance_availability_duration_modifier

    @balance_availability_duration_modifier.setter
    def balance_availability_duration_modifier(self, balance_availability_duration_modifier):
        """Sets the balance_availability_duration_modifier of this CreateBalanceDefinitionPayload.

        Defines when the balance expires within the selected duration.  # noqa: E501

        :param balance_availability_duration_modifier: The balance_availability_duration_modifier of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["noModification", "startOfPeriod", "endOfPeriod"]  # noqa: E501
        if balance_availability_duration_modifier not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_availability_duration_modifier` ({0}), must be one of {1}"  # noqa: E501
                .format(balance_availability_duration_modifier, allowed_values)
            )

        self._balance_availability_duration_modifier = balance_availability_duration_modifier

    @property
    def balance_availability_duration_unit(self):
        """Gets the balance_availability_duration_unit of this CreateBalanceDefinitionPayload.  # noqa: E501

        Unit of time for balance validity.  # noqa: E501

        :return: The balance_availability_duration_unit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._balance_availability_duration_unit

    @balance_availability_duration_unit.setter
    def balance_availability_duration_unit(self, balance_availability_duration_unit):
        """Sets the balance_availability_duration_unit of this CreateBalanceDefinitionPayload.

        Unit of time for balance validity.  # noqa: E501

        :param balance_availability_duration_unit: The balance_availability_duration_unit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["day", "week", "month", "year"]  # noqa: E501
        if balance_availability_duration_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_availability_duration_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(balance_availability_duration_unit, allowed_values)
            )

        self._balance_availability_duration_unit = balance_availability_duration_unit

    @property
    def balance_availability_duration_value(self):
        """Gets the balance_availability_duration_value of this CreateBalanceDefinitionPayload.  # noqa: E501

        Number of time units before the balance expires.  # noqa: E501

        :return: The balance_availability_duration_value of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: int
        """
        return self._balance_availability_duration_value

    @balance_availability_duration_value.setter
    def balance_availability_duration_value(self, balance_availability_duration_value):
        """Sets the balance_availability_duration_value of this CreateBalanceDefinitionPayload.

        Number of time units before the balance expires.  # noqa: E501

        :param balance_availability_duration_value: The balance_availability_duration_value of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: int
        """

        self._balance_availability_duration_value = balance_availability_duration_value

    @property
    def balance_expiration_date(self):
        """Gets the balance_expiration_date of this CreateBalanceDefinitionPayload.  # noqa: E501

        Fixed expiration date (`dd/mm` format) as an alternative to duration-based expiry.  # noqa: E501

        :return: The balance_expiration_date of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: date
        """
        return self._balance_expiration_date

    @balance_expiration_date.setter
    def balance_expiration_date(self, balance_expiration_date):
        """Sets the balance_expiration_date of this CreateBalanceDefinitionPayload.

        Fixed expiration date (`dd/mm` format) as an alternative to duration-based expiry.  # noqa: E501

        :param balance_expiration_date: The balance_expiration_date of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: date
        """

        self._balance_expiration_date = balance_expiration_date

    @property
    def balance_option_amount_overtaking_strategy(self):
        """Gets the balance_option_amount_overtaking_strategy of this CreateBalanceDefinitionPayload.  # noqa: E501

        Defines whether partial credit is allowed when reaching max balance.  # noqa: E501

        :return: The balance_option_amount_overtaking_strategy of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._balance_option_amount_overtaking_strategy

    @balance_option_amount_overtaking_strategy.setter
    def balance_option_amount_overtaking_strategy(self, balance_option_amount_overtaking_strategy):
        """Sets the balance_option_amount_overtaking_strategy of this CreateBalanceDefinitionPayload.

        Defines whether partial credit is allowed when reaching max balance.  # noqa: E501

        :param balance_option_amount_overtaking_strategy: The balance_option_amount_overtaking_strategy of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["strict", "partial"]  # noqa: E501
        if balance_option_amount_overtaking_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_option_amount_overtaking_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(balance_option_amount_overtaking_strategy, allowed_values)
            )

        self._balance_option_amount_overtaking_strategy = balance_option_amount_overtaking_strategy

    @property
    def balance_option_credit_rounding(self):
        """Gets the balance_option_credit_rounding of this CreateBalanceDefinitionPayload.  # noqa: E501

        Defines rounding strategy for credit transactions.  # noqa: E501

        :return: The balance_option_credit_rounding of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._balance_option_credit_rounding

    @balance_option_credit_rounding.setter
    def balance_option_credit_rounding(self, balance_option_credit_rounding):
        """Sets the balance_option_credit_rounding of this CreateBalanceDefinitionPayload.

        Defines rounding strategy for credit transactions.  # noqa: E501

        :param balance_option_credit_rounding: The balance_option_credit_rounding of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["lower", "upper", "natural"]  # noqa: E501
        if balance_option_credit_rounding not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_option_credit_rounding` ({0}), must be one of {1}"  # noqa: E501
                .format(balance_option_credit_rounding, allowed_values)
            )

        self._balance_option_credit_rounding = balance_option_credit_rounding

    @property
    def balance_option_debit_rounding(self):
        """Gets the balance_option_debit_rounding of this CreateBalanceDefinitionPayload.  # noqa: E501

        Defines rounding strategy for debit transactions.  # noqa: E501

        :return: The balance_option_debit_rounding of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._balance_option_debit_rounding

    @balance_option_debit_rounding.setter
    def balance_option_debit_rounding(self, balance_option_debit_rounding):
        """Sets the balance_option_debit_rounding of this CreateBalanceDefinitionPayload.

        Defines rounding strategy for debit transactions.  # noqa: E501

        :param balance_option_debit_rounding: The balance_option_debit_rounding of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["lower", "upper", "natural"]  # noqa: E501
        if balance_option_debit_rounding not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_option_debit_rounding` ({0}), must be one of {1}"  # noqa: E501
                .format(balance_option_debit_rounding, allowed_values)
            )

        self._balance_option_debit_rounding = balance_option_debit_rounding

    @property
    def description(self):
        """Gets the description of this CreateBalanceDefinitionPayload.  # noqa: E501

        Short description of the balance definition.  # noqa: E501

        :return: The description of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBalanceDefinitionPayload.

        Short description of the balance definition.  # noqa: E501

        :param description: The description of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self._description = description

    @property
    def image_ref(self):
        """Gets the image_ref of this CreateBalanceDefinitionPayload.  # noqa: E501

        URL of an optional image reference.  # noqa: E501

        :return: The image_ref of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._image_ref

    @image_ref.setter
    def image_ref(self, image_ref):
        """Sets the image_ref of this CreateBalanceDefinitionPayload.

        URL of an optional image reference.  # noqa: E501

        :param image_ref: The image_ref of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """

        self._image_ref = image_ref

    @property
    def max_amount(self):
        """Gets the max_amount of this CreateBalanceDefinitionPayload.  # noqa: E501

        Maximum allowable balance amount.  # noqa: E501

        :return: The max_amount of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this CreateBalanceDefinitionPayload.

        Maximum allowable balance amount.  # noqa: E501

        :param max_amount: The max_amount of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: float
        """

        self._max_amount = max_amount

    @property
    def max_credit_amount_limit(self):
        """Gets the max_credit_amount_limit of this CreateBalanceDefinitionPayload.  # noqa: E501

        Maximum credit allowed per operation.  # noqa: E501

        :return: The max_credit_amount_limit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_credit_amount_limit

    @max_credit_amount_limit.setter
    def max_credit_amount_limit(self, max_credit_amount_limit):
        """Sets the max_credit_amount_limit of this CreateBalanceDefinitionPayload.

        Maximum credit allowed per operation.  # noqa: E501

        :param max_credit_amount_limit: The max_credit_amount_limit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: float
        """

        self._max_credit_amount_limit = max_credit_amount_limit

    @property
    def max_debit_amount_limit(self):
        """Gets the max_debit_amount_limit of this CreateBalanceDefinitionPayload.  # noqa: E501

        Maximum debit allowed per operation.  # noqa: E501

        :return: The max_debit_amount_limit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_debit_amount_limit

    @max_debit_amount_limit.setter
    def max_debit_amount_limit(self, max_debit_amount_limit):
        """Sets the max_debit_amount_limit of this CreateBalanceDefinitionPayload.

        Maximum debit allowed per operation.  # noqa: E501

        :param max_debit_amount_limit: The max_debit_amount_limit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: float
        """

        self._max_debit_amount_limit = max_debit_amount_limit

    @property
    def meta(self):
        """Gets the meta of this CreateBalanceDefinitionPayload.  # noqa: E501

        Additional metadata for the balance definition.  # noqa: E501

        :return: The meta of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this CreateBalanceDefinitionPayload.

        Additional metadata for the balance definition.  # noqa: E501

        :param meta: The meta of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def min_amount(self):
        """Gets the min_amount of this CreateBalanceDefinitionPayload.  # noqa: E501

        Minimum allowable balance amount.  # noqa: E501

        :return: The min_amount of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: float
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this CreateBalanceDefinitionPayload.

        Minimum allowable balance amount.  # noqa: E501

        :param min_amount: The min_amount of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: float
        """

        self._min_amount = min_amount

    @property
    def name(self):
        """Gets the name of this CreateBalanceDefinitionPayload.  # noqa: E501

        Name of the balance definition.  # noqa: E501

        :return: The name of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBalanceDefinitionPayload.

        Name of the balance definition.  # noqa: E501

        :param name: The name of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this CreateBalanceDefinitionPayload.  # noqa: E501

        Unit of balance measurement.  # noqa: E501

        :return: The unit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CreateBalanceDefinitionPayload.

        Unit of balance measurement.  # noqa: E501

        :param unit: The unit of this CreateBalanceDefinitionPayload.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        allowed_values = ["POINTS", "EUR", "USD", "MXN", "GBP", "INR", "CAD", "SGD", "RON", "JPY", "MYR", "CLP", "PEN", "MAD", "AUD", "CHF", "BRL"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBalanceDefinitionPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBalanceDefinitionPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

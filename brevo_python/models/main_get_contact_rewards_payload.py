# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainGetContactRewardsPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_id': 'int',
        'limit': 'int',
        'metadata': 'list[MainFilter]',
        'offset': 'int',
        'reward_id': 'str',
        'sort': 'str',
        'sort_field': 'str'
    }

    attribute_map = {
        'contact_id': 'contactId',
        'limit': 'limit',
        'metadata': 'metadata',
        'offset': 'offset',
        'reward_id': 'rewardId',
        'sort': 'sort',
        'sort_field': 'sortField'
    }

    def __init__(self, contact_id=None, limit=None, metadata=None, offset=None, reward_id=None, sort=None, sort_field=None):  # noqa: E501
        """MainGetContactRewardsPayload - a model defined in Swagger"""  # noqa: E501

        self._contact_id = None
        self._limit = None
        self._metadata = None
        self._offset = None
        self._reward_id = None
        self._sort = None
        self._sort_field = None
        self.discriminator = None

        self.contact_id = contact_id
        if limit is not None:
            self.limit = limit
        if metadata is not None:
            self.metadata = metadata
        if offset is not None:
            self.offset = offset
        if reward_id is not None:
            self.reward_id = reward_id
        if sort is not None:
            self.sort = sort
        if sort_field is not None:
            self.sort_field = sort_field

    @property
    def contact_id(self):
        """Gets the contact_id of this MainGetContactRewardsPayload.  # noqa: E501

        Contact to attribute the reward  # noqa: E501

        :return: The contact_id of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this MainGetContactRewardsPayload.

        Contact to attribute the reward  # noqa: E501

        :param contact_id: The contact_id of this MainGetContactRewardsPayload.  # noqa: E501
        :type: int
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")  # noqa: E501
        if contact_id is not None and contact_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `contact_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._contact_id = contact_id

    @property
    def limit(self):
        """Gets the limit of this MainGetContactRewardsPayload.  # noqa: E501

        Number of documents per page  # noqa: E501

        :return: The limit of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this MainGetContactRewardsPayload.

        Number of documents per page  # noqa: E501

        :param limit: The limit of this MainGetContactRewardsPayload.  # noqa: E501
        :type: int
        """
        if limit is not None and limit > 500:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `500`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def metadata(self):
        """Gets the metadata of this MainGetContactRewardsPayload.  # noqa: E501

        Data to define the reward for that particular contact  # noqa: E501

        :return: The metadata of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: list[MainFilter]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MainGetContactRewardsPayload.

        Data to define the reward for that particular contact  # noqa: E501

        :param metadata: The metadata of this MainGetContactRewardsPayload.  # noqa: E501
        :type: list[MainFilter]
        """

        self._metadata = metadata

    @property
    def offset(self):
        """Gets the offset of this MainGetContactRewardsPayload.  # noqa: E501

        Index of the first document in the page  # noqa: E501

        :return: The offset of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this MainGetContactRewardsPayload.

        Index of the first document in the page  # noqa: E501

        :param offset: The offset of this MainGetContactRewardsPayload.  # noqa: E501
        :type: int
        """
        if offset is not None and offset < 0:  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset = offset

    @property
    def reward_id(self):
        """Gets the reward_id of this MainGetContactRewardsPayload.  # noqa: E501

        Unique identifier of the associated reward  # noqa: E501

        :return: The reward_id of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: str
        """
        return self._reward_id

    @reward_id.setter
    def reward_id(self, reward_id):
        """Sets the reward_id of this MainGetContactRewardsPayload.

        Unique identifier of the associated reward  # noqa: E501

        :param reward_id: The reward_id of this MainGetContactRewardsPayload.  # noqa: E501
        :type: str
        """

        self._reward_id = reward_id

    @property
    def sort(self):
        """Gets the sort of this MainGetContactRewardsPayload.  # noqa: E501

        Sort the documents in the ascending or descending order  # noqa: E501

        :return: The sort of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this MainGetContactRewardsPayload.

        Sort the documents in the ascending or descending order  # noqa: E501

        :param sort: The sort of this MainGetContactRewardsPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def sort_field(self):
        """Gets the sort_field of this MainGetContactRewardsPayload.  # noqa: E501

        Sort documents by field  # noqa: E501

        :return: The sort_field of this MainGetContactRewardsPayload.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this MainGetContactRewardsPayload.

        Sort documents by field  # noqa: E501

        :param sort_field: The sort_field of this MainGetContactRewardsPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["updatedAt", "createdAt"]  # noqa: E501
        if sort_field not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_field` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_field, allowed_values)
            )

        self._sort_field = sort_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainGetContactRewardsPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainGetContactRewardsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

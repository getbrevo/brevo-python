# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainCreateRewardResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'id': 'str',
        'loyalty_program_id': 'str',
        'name': 'str',
        'public_description': 'str',
        'public_image': 'str',
        'public_name': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'id': 'id',
        'loyalty_program_id': 'loyaltyProgramId',
        'name': 'name',
        'public_description': 'publicDescription',
        'public_image': 'publicImage',
        'public_name': 'publicName',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, id=None, loyalty_program_id=None, name=None, public_description=None, public_image=None, public_name=None, updated_at=None):  # noqa: E501
        """MainCreateRewardResponse - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._id = None
        self._loyalty_program_id = None
        self._name = None
        self._public_description = None
        self._public_image = None
        self._public_name = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if loyalty_program_id is not None:
            self.loyalty_program_id = loyalty_program_id
        if name is not None:
            self.name = name
        if public_description is not None:
            self.public_description = public_description
        if public_image is not None:
            self.public_image = public_image
        if public_name is not None:
            self.public_name = public_name
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this MainCreateRewardResponse.  # noqa: E501

        Timestamp when the reward was created  # noqa: E501

        :return: The created_at of this MainCreateRewardResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MainCreateRewardResponse.

        Timestamp when the reward was created  # noqa: E501

        :param created_at: The created_at of this MainCreateRewardResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this MainCreateRewardResponse.  # noqa: E501

        Unique identifier for the reward  # noqa: E501

        :return: The id of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MainCreateRewardResponse.

        Unique identifier for the reward  # noqa: E501

        :param id: The id of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def loyalty_program_id(self):
        """Gets the loyalty_program_id of this MainCreateRewardResponse.  # noqa: E501

        Id of the loyalty program to which the current reward belongs to  # noqa: E501

        :return: The loyalty_program_id of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._loyalty_program_id

    @loyalty_program_id.setter
    def loyalty_program_id(self, loyalty_program_id):
        """Sets the loyalty_program_id of this MainCreateRewardResponse.

        Id of the loyalty program to which the current reward belongs to  # noqa: E501

        :param loyalty_program_id: The loyalty_program_id of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._loyalty_program_id = loyalty_program_id

    @property
    def name(self):
        """Gets the name of this MainCreateRewardResponse.  # noqa: E501

        Name of the reward  # noqa: E501

        :return: The name of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MainCreateRewardResponse.

        Name of the reward  # noqa: E501

        :param name: The name of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public_description(self):
        """Gets the public_description of this MainCreateRewardResponse.  # noqa: E501

        Public description for the reward  # noqa: E501

        :return: The public_description of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this MainCreateRewardResponse.

        Public description for the reward  # noqa: E501

        :param public_description: The public_description of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._public_description = public_description

    @property
    def public_image(self):
        """Gets the public_image of this MainCreateRewardResponse.  # noqa: E501

        Public Image for the reward  # noqa: E501

        :return: The public_image of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_image

    @public_image.setter
    def public_image(self, public_image):
        """Sets the public_image of this MainCreateRewardResponse.

        Public Image for the reward  # noqa: E501

        :param public_image: The public_image of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._public_image = public_image

    @property
    def public_name(self):
        """Gets the public_name of this MainCreateRewardResponse.  # noqa: E501

        Public name for the reward  # noqa: E501

        :return: The public_name of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """Sets the public_name of this MainCreateRewardResponse.

        Public name for the reward  # noqa: E501

        :param public_name: The public_name of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._public_name = public_name

    @property
    def updated_at(self):
        """Gets the updated_at of this MainCreateRewardResponse.  # noqa: E501

        Timestamp for when this reward was last updated.  # noqa: E501

        :return: The updated_at of this MainCreateRewardResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MainCreateRewardResponse.

        Timestamp for when this reward was last updated.  # noqa: E501

        :param updated_at: The updated_at of this MainCreateRewardResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainCreateRewardResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainCreateRewardResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

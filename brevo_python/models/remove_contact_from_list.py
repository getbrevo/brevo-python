# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoveContactFromList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emails': 'list[str]',
        'ids': 'list[int]',
        'ext_ids': 'list[str]',
        'all': 'bool'
    }

    attribute_map = {
        'emails': 'emails',
        'ids': 'ids',
        'ext_ids': 'extIds',
        'all': 'all'
    }

    def __init__(self, emails=None, ids=None, ext_ids=None, all=None):  # noqa: E501
        """RemoveContactFromList - a model defined in Swagger"""  # noqa: E501

        self._emails = None
        self._ids = None
        self._ext_ids = None
        self._all = None
        self.discriminator = None

        if emails is not None:
            self.emails = emails
        if ids is not None:
            self.ids = ids
        if ext_ids is not None:
            self.ext_ids = ext_ids
        if all is not None:
            self.all = all

    @property
    def emails(self):
        """Gets the emails of this RemoveContactFromList.  # noqa: E501

        Required if 'all' is false and EXT_ID attributes, IDs are not passed. Emails to remove from a list. You can pass a maximum of 150 emails for removal in one request.  # noqa: E501

        :return: The emails of this RemoveContactFromList.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this RemoveContactFromList.

        Required if 'all' is false and EXT_ID attributes, IDs are not passed. Emails to remove from a list. You can pass a maximum of 150 emails for removal in one request.  # noqa: E501

        :param emails: The emails of this RemoveContactFromList.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def ids(self):
        """Gets the ids of this RemoveContactFromList.  # noqa: E501

        Mandatory if Emails, EXT_ID attributes are not passed, ignored otherwise. Contact IDs to add to a list. You can pass a maximum of 150 Ids for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.  # noqa: E501

        :return: The ids of this RemoveContactFromList.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this RemoveContactFromList.

        Mandatory if Emails, EXT_ID attributes are not passed, ignored otherwise. Contact IDs to add to a list. You can pass a maximum of 150 Ids for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.  # noqa: E501

        :param ids: The ids of this RemoveContactFromList.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def ext_ids(self):
        """Gets the ext_ids of this RemoveContactFromList.  # noqa: E501

        Mandatory if 'all' is false and Emails, IDs are not passed, ignored otherwise. EXT_ID attributes to add to a list. You can pass a maximum of 150 extIds for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.  # noqa: E501

        :return: The ext_ids of this RemoveContactFromList.  # noqa: E501
        :rtype: list[str]
        """
        return self._ext_ids

    @ext_ids.setter
    def ext_ids(self, ext_ids):
        """Sets the ext_ids of this RemoveContactFromList.

        Mandatory if 'all' is false and Emails, IDs are not passed, ignored otherwise. EXT_ID attributes to add to a list. You can pass a maximum of 150 extIds for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.  # noqa: E501

        :param ext_ids: The ext_ids of this RemoveContactFromList.  # noqa: E501
        :type: list[str]
        """

        self._ext_ids = ext_ids

    @property
    def all(self):
        """Gets the all of this RemoveContactFromList.  # noqa: E501

        Required if none of 'emails', EXT_ID attributes or 'ids' are passed. Remove all existing contacts from a list.  A process will be created in this scenario. You can fetch the process details to know about the progress  # noqa: E501

        :return: The all of this RemoveContactFromList.  # noqa: E501
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this RemoveContactFromList.

        Required if none of 'emails', EXT_ID attributes or 'ids' are passed. Remove all existing contacts from a list.  A process will be created in this scenario. You can fetch the process details to know about the progress  # noqa: E501

        :param all: The all of this RemoveContactFromList.  # noqa: E501
        :type: bool
        """

        self._all = all

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoveContactFromList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoveContactFromList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

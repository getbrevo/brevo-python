# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TierForContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'loyalty_program_id': 'str',
        'group_id': 'str',
        'contact_id': 'int',
        'meta': 'dict(str, object)',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'loyalty_program_id': 'loyaltyProgramId',
        'group_id': 'groupId',
        'contact_id': 'contactId',
        'meta': 'meta',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, loyalty_program_id=None, group_id=None, contact_id=None, meta=None, created_at=None, updated_at=None):  # noqa: E501
        """TierForContact - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._loyalty_program_id = None
        self._group_id = None
        self._contact_id = None
        self._meta = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if loyalty_program_id is not None:
            self.loyalty_program_id = loyalty_program_id
        if group_id is not None:
            self.group_id = group_id
        if contact_id is not None:
            self.contact_id = contact_id
        if meta is not None:
            self.meta = meta
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this TierForContact.  # noqa: E501

        Unique identifier for the assigned tier  # noqa: E501

        :return: The id of this TierForContact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TierForContact.

        Unique identifier for the assigned tier  # noqa: E501

        :param id: The id of this TierForContact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def loyalty_program_id(self):
        """Gets the loyalty_program_id of this TierForContact.  # noqa: E501

        Associated loyalty program Id  # noqa: E501

        :return: The loyalty_program_id of this TierForContact.  # noqa: E501
        :rtype: str
        """
        return self._loyalty_program_id

    @loyalty_program_id.setter
    def loyalty_program_id(self, loyalty_program_id):
        """Sets the loyalty_program_id of this TierForContact.

        Associated loyalty program Id  # noqa: E501

        :param loyalty_program_id: The loyalty_program_id of this TierForContact.  # noqa: E501
        :type: str
        """

        self._loyalty_program_id = loyalty_program_id

    @property
    def group_id(self):
        """Gets the group_id of this TierForContact.  # noqa: E501

        Group Id to which the tier is associated  # noqa: E501

        :return: The group_id of this TierForContact.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this TierForContact.

        Group Id to which the tier is associated  # noqa: E501

        :param group_id: The group_id of this TierForContact.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def contact_id(self):
        """Gets the contact_id of this TierForContact.  # noqa: E501

        Contact to which the tier is assigned  # noqa: E501

        :return: The contact_id of this TierForContact.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this TierForContact.

        Contact to which the tier is assigned  # noqa: E501

        :param contact_id: The contact_id of this TierForContact.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def meta(self):
        """Gets the meta of this TierForContact.  # noqa: E501

        object  # noqa: E501

        :return: The meta of this TierForContact.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this TierForContact.

        object  # noqa: E501

        :param meta: The meta of this TierForContact.  # noqa: E501
        :type: dict(str, object)
        """

        self._meta = meta

    @property
    def created_at(self):
        """Gets the created_at of this TierForContact.  # noqa: E501


        :return: The created_at of this TierForContact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TierForContact.


        :param created_at: The created_at of this TierForContact.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TierForContact.  # noqa: E501


        :return: The updated_at of this TierForContact.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TierForContact.


        :param updated_at: The updated_at of this TierForContact.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TierForContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TierForContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

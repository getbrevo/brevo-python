# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainValidateRewardPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributed_reward_id': 'str',
        'code': 'str',
        'contact_id': 'int',
        'loyalty_subscription_id': 'str',
        'point_of_sell_id': 'str',
        'reward_id': 'str'
    }

    attribute_map = {
        'attributed_reward_id': 'attributedRewardId',
        'code': 'code',
        'contact_id': 'contactId',
        'loyalty_subscription_id': 'loyaltySubscriptionId',
        'point_of_sell_id': 'pointOfSellId',
        'reward_id': 'rewardId'
    }

    def __init__(self, attributed_reward_id=None, code=None, contact_id=None, loyalty_subscription_id=None, point_of_sell_id=None, reward_id=None):  # noqa: E501
        """MainValidateRewardPayload - a model defined in Swagger"""  # noqa: E501

        self._attributed_reward_id = None
        self._code = None
        self._contact_id = None
        self._loyalty_subscription_id = None
        self._point_of_sell_id = None
        self._reward_id = None
        self.discriminator = None

        if attributed_reward_id is not None:
            self.attributed_reward_id = attributed_reward_id
        if code is not None:
            self.code = code
        if contact_id is not None:
            self.contact_id = contact_id
        if loyalty_subscription_id is not None:
            self.loyalty_subscription_id = loyalty_subscription_id
        if point_of_sell_id is not None:
            self.point_of_sell_id = point_of_sell_id
        if reward_id is not None:
            self.reward_id = reward_id

    @property
    def attributed_reward_id(self):
        """Gets the attributed_reward_id of this MainValidateRewardPayload.  # noqa: E501

        Unique identifier for the attributed reward  # noqa: E501

        :return: The attributed_reward_id of this MainValidateRewardPayload.  # noqa: E501
        :rtype: str
        """
        return self._attributed_reward_id

    @attributed_reward_id.setter
    def attributed_reward_id(self, attributed_reward_id):
        """Sets the attributed_reward_id of this MainValidateRewardPayload.

        Unique identifier for the attributed reward  # noqa: E501

        :param attributed_reward_id: The attributed_reward_id of this MainValidateRewardPayload.  # noqa: E501
        :type: str
        """

        self._attributed_reward_id = attributed_reward_id

    @property
    def code(self):
        """Gets the code of this MainValidateRewardPayload.  # noqa: E501

        Validation code for the reward  # noqa: E501

        :return: The code of this MainValidateRewardPayload.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MainValidateRewardPayload.

        Validation code for the reward  # noqa: E501

        :param code: The code of this MainValidateRewardPayload.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def contact_id(self):
        """Gets the contact_id of this MainValidateRewardPayload.  # noqa: E501

        Unique identifier for the contact  # noqa: E501

        :return: The contact_id of this MainValidateRewardPayload.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this MainValidateRewardPayload.

        Unique identifier for the contact  # noqa: E501

        :param contact_id: The contact_id of this MainValidateRewardPayload.  # noqa: E501
        :type: int
        """
        if contact_id is not None and contact_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `contact_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._contact_id = contact_id

    @property
    def loyalty_subscription_id(self):
        """Gets the loyalty_subscription_id of this MainValidateRewardPayload.  # noqa: E501

        Identifier for the loyalty subscription  # noqa: E501

        :return: The loyalty_subscription_id of this MainValidateRewardPayload.  # noqa: E501
        :rtype: str
        """
        return self._loyalty_subscription_id

    @loyalty_subscription_id.setter
    def loyalty_subscription_id(self, loyalty_subscription_id):
        """Sets the loyalty_subscription_id of this MainValidateRewardPayload.

        Identifier for the loyalty subscription  # noqa: E501

        :param loyalty_subscription_id: The loyalty_subscription_id of this MainValidateRewardPayload.  # noqa: E501
        :type: str
        """

        self._loyalty_subscription_id = loyalty_subscription_id

    @property
    def point_of_sell_id(self):
        """Gets the point_of_sell_id of this MainValidateRewardPayload.  # noqa: E501

        Identifier for the point of sale  # noqa: E501

        :return: The point_of_sell_id of this MainValidateRewardPayload.  # noqa: E501
        :rtype: str
        """
        return self._point_of_sell_id

    @point_of_sell_id.setter
    def point_of_sell_id(self, point_of_sell_id):
        """Sets the point_of_sell_id of this MainValidateRewardPayload.

        Identifier for the point of sale  # noqa: E501

        :param point_of_sell_id: The point_of_sell_id of this MainValidateRewardPayload.  # noqa: E501
        :type: str
        """

        self._point_of_sell_id = point_of_sell_id

    @property
    def reward_id(self):
        """Gets the reward_id of this MainValidateRewardPayload.  # noqa: E501

        Unique identifier for the reward  # noqa: E501

        :return: The reward_id of this MainValidateRewardPayload.  # noqa: E501
        :rtype: str
        """
        return self._reward_id

    @reward_id.setter
    def reward_id(self, reward_id):
        """Sets the reward_id of this MainValidateRewardPayload.

        Unique identifier for the reward  # noqa: E501

        :param reward_id: The reward_id of this MainValidateRewardPayload.  # noqa: E501
        :type: str
        """

        self._reward_id = reward_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainValidateRewardPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainValidateRewardPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

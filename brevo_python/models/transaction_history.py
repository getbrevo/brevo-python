# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'balance_expiration_date': 'str',
        'cancelled_at': 'str',
        'completed_at': 'str',
        'created_at': 'str',
        'id': 'str',
        'meta': 'object',
        'reject_reason': 'str',
        'rejected_at': 'str',
        'status': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'balance_expiration_date': 'balanceExpirationDate',
        'cancelled_at': 'cancelledAt',
        'completed_at': 'completedAt',
        'created_at': 'createdAt',
        'id': 'id',
        'meta': 'meta',
        'reject_reason': 'rejectReason',
        'rejected_at': 'rejectedAt',
        'status': 'status'
    }

    def __init__(self, amount=None, balance_expiration_date=None, cancelled_at=None, completed_at=None, created_at=None, id=None, meta=None, reject_reason=None, rejected_at=None, status=None):  # noqa: E501
        """TransactionHistory - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._balance_expiration_date = None
        self._cancelled_at = None
        self._completed_at = None
        self._created_at = None
        self._id = None
        self._meta = None
        self._reject_reason = None
        self._rejected_at = None
        self._status = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if balance_expiration_date is not None:
            self.balance_expiration_date = balance_expiration_date
        if cancelled_at is not None:
            self.cancelled_at = cancelled_at
        if completed_at is not None:
            self.completed_at = completed_at
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if meta is not None:
            self.meta = meta
        if reject_reason is not None:
            self.reject_reason = reject_reason
        if rejected_at is not None:
            self.rejected_at = rejected_at
        if status is not None:
            self.status = status

    @property
    def amount(self):
        """Gets the amount of this TransactionHistory.  # noqa: E501

        The transaction amount.  # noqa: E501

        :return: The amount of this TransactionHistory.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionHistory.

        The transaction amount.  # noqa: E501

        :param amount: The amount of this TransactionHistory.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def balance_expiration_date(self):
        """Gets the balance_expiration_date of this TransactionHistory.  # noqa: E501

        Expiration date of the balance associated with this transaction.  # noqa: E501

        :return: The balance_expiration_date of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._balance_expiration_date

    @balance_expiration_date.setter
    def balance_expiration_date(self, balance_expiration_date):
        """Sets the balance_expiration_date of this TransactionHistory.

        Expiration date of the balance associated with this transaction.  # noqa: E501

        :param balance_expiration_date: The balance_expiration_date of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._balance_expiration_date = balance_expiration_date

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this TransactionHistory.  # noqa: E501

        Timestamp when the transaction was canceled, if applicable.  # noqa: E501

        :return: The cancelled_at of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this TransactionHistory.

        Timestamp when the transaction was canceled, if applicable.  # noqa: E501

        :param cancelled_at: The cancelled_at of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._cancelled_at = cancelled_at

    @property
    def completed_at(self):
        """Gets the completed_at of this TransactionHistory.  # noqa: E501

        Timestamp when the transaction was successfully completed.  # noqa: E501

        :return: The completed_at of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this TransactionHistory.

        Timestamp when the transaction was successfully completed.  # noqa: E501

        :param completed_at: The completed_at of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this TransactionHistory.  # noqa: E501

        Timestamp when the transaction was initiated.  # noqa: E501

        :return: The created_at of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TransactionHistory.

        Timestamp when the transaction was initiated.  # noqa: E501

        :param created_at: The created_at of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TransactionHistory.  # noqa: E501

        Unique identifier of the transaction.  # noqa: E501

        :return: The id of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionHistory.

        Unique identifier of the transaction.  # noqa: E501

        :param id: The id of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this TransactionHistory.  # noqa: E501

        Optional metadata associated with the transaction.  # noqa: E501

        :return: The meta of this TransactionHistory.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this TransactionHistory.

        Optional metadata associated with the transaction.  # noqa: E501

        :param meta: The meta of this TransactionHistory.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def reject_reason(self):
        """Gets the reject_reason of this TransactionHistory.  # noqa: E501

        Reason for rejection, if the transaction was declined.  # noqa: E501

        :return: The reject_reason of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this TransactionHistory.

        Reason for rejection, if the transaction was declined.  # noqa: E501

        :param reject_reason: The reject_reason of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._reject_reason = reject_reason

    @property
    def rejected_at(self):
        """Gets the rejected_at of this TransactionHistory.  # noqa: E501

        Timestamp when the transaction was rejected.  # noqa: E501

        :return: The rejected_at of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._rejected_at

    @rejected_at.setter
    def rejected_at(self, rejected_at):
        """Sets the rejected_at of this TransactionHistory.

        Timestamp when the transaction was rejected.  # noqa: E501

        :param rejected_at: The rejected_at of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._rejected_at = rejected_at

    @property
    def status(self):
        """Gets the status of this TransactionHistory.  # noqa: E501

        Current status of the transaction (e.g., pending, completed, rejected).  # noqa: E501

        :return: The status of this TransactionHistory.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionHistory.

        Current status of the transaction (e.g., pending, completed, rejected).  # noqa: E501

        :param status: The status of this TransactionHistory.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body9(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'attribute_type': 'str',
        'description': 'str',
        'options_labels': 'list[str]',
        'object_type': 'str'
    }

    attribute_map = {
        'label': 'label',
        'attribute_type': 'attributeType',
        'description': 'description',
        'options_labels': 'optionsLabels',
        'object_type': 'objectType'
    }

    def __init__(self, label=None, attribute_type=None, description=None, options_labels=None, object_type=None):  # noqa: E501
        """Body9 - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._attribute_type = None
        self._description = None
        self._options_labels = None
        self._object_type = None
        self.discriminator = None

        self.label = label
        self.attribute_type = attribute_type
        if description is not None:
            self.description = description
        if options_labels is not None:
            self.options_labels = options_labels
        self.object_type = object_type

    @property
    def label(self):
        """Gets the label of this Body9.  # noqa: E501

        The label for the attribute (max 50 characters, cannot be empty)  # noqa: E501

        :return: The label of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Body9.

        The label for the attribute (max 50 characters, cannot be empty)  # noqa: E501

        :param label: The label of this Body9.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def attribute_type(self):
        """Gets the attribute_type of this Body9.  # noqa: E501

        The type of attribute (must be one of the defined enums)  # noqa: E501

        :return: The attribute_type of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type):
        """Sets the attribute_type of this Body9.

        The type of attribute (must be one of the defined enums)  # noqa: E501

        :param attribute_type: The attribute_type of this Body9.  # noqa: E501
        :type: str
        """
        if attribute_type is None:
            raise ValueError("Invalid value for `attribute_type`, must not be `None`")  # noqa: E501
        allowed_values = ["text", "user", "number", "single-select", "date", "boolean", "multi-choice"]  # noqa: E501
        if attribute_type not in allowed_values:
            raise ValueError(
                "Invalid value for `attribute_type` ({0}), must be one of {1}"  # noqa: E501
                .format(attribute_type, allowed_values)
            )

        self._attribute_type = attribute_type

    @property
    def description(self):
        """Gets the description of this Body9.  # noqa: E501

        A description of the attribute  # noqa: E501

        :return: The description of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body9.

        A description of the attribute  # noqa: E501

        :param description: The description of this Body9.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def options_labels(self):
        """Gets the options_labels of this Body9.  # noqa: E501

        Options for multi-choice or single-select attributes  # noqa: E501

        :return: The options_labels of this Body9.  # noqa: E501
        :rtype: list[str]
        """
        return self._options_labels

    @options_labels.setter
    def options_labels(self, options_labels):
        """Sets the options_labels of this Body9.

        Options for multi-choice or single-select attributes  # noqa: E501

        :param options_labels: The options_labels of this Body9.  # noqa: E501
        :type: list[str]
        """

        self._options_labels = options_labels

    @property
    def object_type(self):
        """Gets the object_type of this Body9.  # noqa: E501

        The type of object the attribute belongs to (prefilled with `companies`or `deal`, mandatory)  # noqa: E501

        :return: The object_type of this Body9.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this Body9.

        The type of object the attribute belongs to (prefilled with `companies`or `deal`, mandatory)  # noqa: E501

        :param object_type: The object_type of this Body9.  # noqa: E501
        :type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501
        allowed_values = ["companies", "deals"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"  # noqa: E501
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body9, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body9):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderBilling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'city': 'str',
        'country_code': 'str',
        'country': 'str',
        'phone': 'str',
        'post_code': 'str',
        'payment_method': 'str',
        'region': 'str'
    }

    attribute_map = {
        'address': 'address',
        'city': 'city',
        'country_code': 'countryCode',
        'country': 'country',
        'phone': 'phone',
        'post_code': 'postCode',
        'payment_method': 'paymentMethod',
        'region': 'region'
    }

    def __init__(self, address=None, city=None, country_code=None, country=None, phone=None, post_code=None, payment_method=None, region=None):  # noqa: E501
        """OrderBilling - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._city = None
        self._country_code = None
        self._country = None
        self._phone = None
        self._post_code = None
        self._payment_method = None
        self._region = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if country_code is not None:
            self.country_code = country_code
        if country is not None:
            self.country = country
        if phone is not None:
            self.phone = phone
        if post_code is not None:
            self.post_code = post_code
        if payment_method is not None:
            self.payment_method = payment_method
        if region is not None:
            self.region = region

    @property
    def address(self):
        """Gets the address of this OrderBilling.  # noqa: E501

        Full billing address.  # noqa: E501

        :return: The address of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrderBilling.

        Full billing address.  # noqa: E501

        :param address: The address of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this OrderBilling.  # noqa: E501

        Exact city of the address.  # noqa: E501

        :return: The city of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrderBilling.

        Exact city of the address.  # noqa: E501

        :param city: The city of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this OrderBilling.  # noqa: E501

        Billing country 2-letter ISO code.  # noqa: E501

        :return: The country_code of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OrderBilling.

        Billing country 2-letter ISO code.  # noqa: E501

        :param country_code: The country_code of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country(self):
        """Gets the country of this OrderBilling.  # noqa: E501

        Billing country name.  # noqa: E501

        :return: The country of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OrderBilling.

        Billing country name.  # noqa: E501

        :param country: The country of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this OrderBilling.  # noqa: E501

        Billing phone number.  # noqa: E501

        :return: The phone of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this OrderBilling.

        Billing phone number.  # noqa: E501

        :param phone: The phone of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def post_code(self):
        """Gets the post_code of this OrderBilling.  # noqa: E501

        Postcode for delivery and billing.  # noqa: E501

        :return: The post_code of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this OrderBilling.

        Postcode for delivery and billing.  # noqa: E501

        :param post_code: The post_code of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def payment_method(self):
        """Gets the payment_method of this OrderBilling.  # noqa: E501

        How the visitor will pay for the item(s), e.g. paypal, check, etc.  # noqa: E501

        :return: The payment_method of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this OrderBilling.

        How the visitor will pay for the item(s), e.g. paypal, check, etc.  # noqa: E501

        :param payment_method: The payment_method of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def region(self):
        """Gets the region of this OrderBilling.  # noqa: E501

        Exact region (state/province) for delivery and billing.  # noqa: E501

        :return: The region of this OrderBilling.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OrderBilling.

        Exact region (state/province) for delivery and billing.  # noqa: E501

        :param region: The region of this OrderBilling.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderBilling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBilling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContactBalancesResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_definition_id': 'str',
        'balances': 'list[BalanceDataPerContact]',
        'count': 'int',
        'loyalty_program_id': 'str'
    }

    attribute_map = {
        'balance_definition_id': 'balanceDefinitionId',
        'balances': 'balances',
        'count': 'count',
        'loyalty_program_id': 'loyaltyProgramId'
    }

    def __init__(self, balance_definition_id=None, balances=None, count=None, loyalty_program_id=None):  # noqa: E501
        """ContactBalancesResp - a model defined in Swagger"""  # noqa: E501

        self._balance_definition_id = None
        self._balances = None
        self._count = None
        self._loyalty_program_id = None
        self.discriminator = None

        if balance_definition_id is not None:
            self.balance_definition_id = balance_definition_id
        if balances is not None:
            self.balances = balances
        if count is not None:
            self.count = count
        if loyalty_program_id is not None:
            self.loyalty_program_id = loyalty_program_id

    @property
    def balance_definition_id(self):
        """Gets the balance_definition_id of this ContactBalancesResp.  # noqa: E501


        :return: The balance_definition_id of this ContactBalancesResp.  # noqa: E501
        :rtype: str
        """
        return self._balance_definition_id

    @balance_definition_id.setter
    def balance_definition_id(self, balance_definition_id):
        """Sets the balance_definition_id of this ContactBalancesResp.


        :param balance_definition_id: The balance_definition_id of this ContactBalancesResp.  # noqa: E501
        :type: str
        """

        self._balance_definition_id = balance_definition_id

    @property
    def balances(self):
        """Gets the balances of this ContactBalancesResp.  # noqa: E501


        :return: The balances of this ContactBalancesResp.  # noqa: E501
        :rtype: list[BalanceDataPerContact]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this ContactBalancesResp.


        :param balances: The balances of this ContactBalancesResp.  # noqa: E501
        :type: list[BalanceDataPerContact]
        """

        self._balances = balances

    @property
    def count(self):
        """Gets the count of this ContactBalancesResp.  # noqa: E501


        :return: The count of this ContactBalancesResp.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ContactBalancesResp.


        :param count: The count of this ContactBalancesResp.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def loyalty_program_id(self):
        """Gets the loyalty_program_id of this ContactBalancesResp.  # noqa: E501


        :return: The loyalty_program_id of this ContactBalancesResp.  # noqa: E501
        :rtype: str
        """
        return self._loyalty_program_id

    @loyalty_program_id.setter
    def loyalty_program_id(self, loyalty_program_id):
        """Sets the loyalty_program_id of this ContactBalancesResp.


        :param loyalty_program_id: The loyalty_program_id of this ContactBalancesResp.  # noqa: E501
        :type: str
        """

        self._loyalty_program_id = loyalty_program_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactBalancesResp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactBalancesResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

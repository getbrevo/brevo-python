# coding: utf-8

"""
    Brevo API

    Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@brevo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TierRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'image_ref': 'str',
        'access_conditions': 'list[TierRequestAccessConditions]',
        'tier_rewards': 'list[TierRequestTierRewards]'
    }

    attribute_map = {
        'name': 'name',
        'image_ref': 'imageRef',
        'access_conditions': 'accessConditions',
        'tier_rewards': 'tierRewards'
    }

    def __init__(self, name=None, image_ref=None, access_conditions=None, tier_rewards=None):  # noqa: E501
        """TierRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._image_ref = None
        self._access_conditions = None
        self._tier_rewards = None
        self.discriminator = None

        self.name = name
        if image_ref is not None:
            self.image_ref = image_ref
        self.access_conditions = access_conditions
        if tier_rewards is not None:
            self.tier_rewards = tier_rewards

    @property
    def name(self):
        """Gets the name of this TierRequest.  # noqa: E501

        Name of the tier to be created  # noqa: E501

        :return: The name of this TierRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TierRequest.

        Name of the tier to be created  # noqa: E501

        :param name: The name of this TierRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image_ref(self):
        """Gets the image_ref of this TierRequest.  # noqa: E501

        Image of the tier  # noqa: E501

        :return: The image_ref of this TierRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_ref

    @image_ref.setter
    def image_ref(self, image_ref):
        """Sets the image_ref of this TierRequest.

        Image of the tier  # noqa: E501

        :param image_ref: The image_ref of this TierRequest.  # noqa: E501
        :type: str
        """

        self._image_ref = image_ref

    @property
    def access_conditions(self):
        """Gets the access_conditions of this TierRequest.  # noqa: E501


        :return: The access_conditions of this TierRequest.  # noqa: E501
        :rtype: list[TierRequestAccessConditions]
        """
        return self._access_conditions

    @access_conditions.setter
    def access_conditions(self, access_conditions):
        """Sets the access_conditions of this TierRequest.


        :param access_conditions: The access_conditions of this TierRequest.  # noqa: E501
        :type: list[TierRequestAccessConditions]
        """
        if access_conditions is None:
            raise ValueError("Invalid value for `access_conditions`, must not be `None`")  # noqa: E501

        self._access_conditions = access_conditions

    @property
    def tier_rewards(self):
        """Gets the tier_rewards of this TierRequest.  # noqa: E501


        :return: The tier_rewards of this TierRequest.  # noqa: E501
        :rtype: list[TierRequestTierRewards]
        """
        return self._tier_rewards

    @tier_rewards.setter
    def tier_rewards(self, tier_rewards):
        """Sets the tier_rewards of this TierRequest.


        :param tier_rewards: The tier_rewards of this TierRequest.  # noqa: E501
        :type: list[TierRequestTierRewards]
        """

        self._tier_rewards = tier_rewards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TierRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TierRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
